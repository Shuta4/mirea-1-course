// DISCLAIMER: из-за непонятного ограничения на кол-во загружаемых файлов пришлось загрузить ДЗ одним файлом.

// alphabet.cpp
#include <iostream>
#include <algorithm>
#include <string>

int main(int argc, char *argv[])
{
	std::string s;
	std::cout << "Enter some string >> ";
	std::getline(std::cin, s);

	if (s.size() < 30) {
		std::cout << "You entered less then 30 symbols\n";
		return 1;
	} else if (s.size() > 30) {
		s = s.substr(0, 30);
	}

	for (int i = 0; i < s.size() - 1; i++) {
		for (int j = 0; j < s.size() - 1; j++ ) {
			if (s[j] > s[j + 1]) {
				std::swap(s[j], s[j + 1]);
			}
		}
	}
	std::cout << "Sorted string: " << s << '\n';
}

// filecopy.cpp
#include <iostream>
#include <fstream>
#include <string>

int main(int argc, char *argv[])
{
	std::string s;
	std::string cs;
	std::cout << "Enter content of file >>\n";
	while (s.empty() || !cs.empty()) {
		getline(std::cin, cs);
		s += cs + '\n';
	}

	std::ofstream fo;
	fo.open("test");
	if (!fo.is_open()) {
		std::cout << "Can not open file for writing\n";
		return 1;
	}
	fo << s;
	fo.close();

	std::ifstream fi;
	fi.open("test");
	if (!fi.is_open()) {
		std::cout << "Can not open file for reading\n";
		return 1;
	}
	std::cout << "Content of file:\n";
	while (std::getline(fi, s)) {
		std::cout << s << '\n';
	}
	fi.close();
}

// filter.cpp
#include <iostream>
#include <fstream>
#include <string>

int main(int argc, char *argv[])
{
	std::string s;
	std::cout << "Enter some string >> ";
	std::getline(std::cin, s);

	std::ofstream fo;
	fo.open("test");
	if (!fo.is_open()) {
		std::cout << "Can not open file for writing\n";
		return 1;
	}
	fo << s;
	fo.close();

	std::ifstream fi;
	fi.open("test");
	if (!fi.is_open()) {
		std::cout << "Can not open file for reading\n";
		return 1;
	}
	std::getline(fi, s);
	fi.close();

	std::cout << "Filtered string: ";
	for (int i = 0; i < s.size(); i++) {
		auto c = s[i];
		if (std::isdigit(c)) {
			std::cout << c;
		} else if (i > 0 && std::isdigit(s[i - 1])) {
			std::cout << ' ';
		}
	}
	std::cout << '\n';
}

// loan2.cpp
#include <iostream>
#include <cmath>

int main(int argc, char *argv[])
{
	float S, m;
	int n;
	std::cout << "Find p by S, m, n\n";
	std::cout << "Enter S, m and n: ";
	std::cin >> S >> m >> n;

	if (S <= 0 || m <= 0) {
		std::cout << "S and m can not be <= 0\n";
		return 1;
	}

	if (n < 0) {
		std::cout << "n must be greater then 0\n";
		return 1;
	}

	float step = 10;
	float r = 10;
	float prev_r = 0;

	if (m * 12 * n < S) {
		std::cout << "Total pay is lower then S\n";
		return 1;
	}

	while (step >= 0.00001) {
		float current_m = (S * r * std::pow(1 + r, n)) / (12 * (std::pow(1 + r, n) - 1));
		if (current_m < m) {
			prev_r = r;
			r += step;
		} else if (std::abs(current_m - m) <= 0.1) {
			std::cout << "p = " << r * 100 << '\n';
			return 0;
		} else {
			step /= 10;
			r = prev_r + step;
		}
	}
	std::cout << "Can not find correct value.\n";
}

// loan.cpp
#include <iostream>
#include <cmath>

int main(int argc, char *argv[])
{
	float S, p;
	int n;
	std::cout << "Find m by S, p, n\n";
	std::cout << "Enter S, p and n: ";
	std::cin >> S >> p >> n;

	if (S <= 0 || n <= 0 || p <= 0) {
		std::cout << "S, p and n must be greater then 0\n";
		return 1;
	}

	float r = p / 100;
	float m = (S * r * std::pow(1 + r, n)) / (12 * (std::pow(1 + r, n) - 1));

	std::cout << "m = " << m << '\n';
}
